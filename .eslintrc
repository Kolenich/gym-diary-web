{
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "prettier"],
  "parserOptions": {
    // Allows for the parsing of modern ECMAScript features
    "ecmaVersion": 2021,
    // Allows for the use of imports
    "sourceType": "module",
    "ecmaFeatures": {
      // Allows for the parsing of JSX
      "jsx": true,
      "arrowFunctions": true
    },
    "project": "./tsconfig.json"
  },
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/resolver": {
      "node": {
        "extensions": [".ts", ".tsx"],
        "paths": ["./src"]
      }
    }
  },
  "extends": [
    "eslint:recommended",
    // Uses the recommended rules from @eslint-plugin-react
    "plugin:react/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    // Uses the recommended rules from the @typescript-eslint/eslint-plugin
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "ignorePatterns": ["craco.config.js"],
  "rules": {
    // Place to specify ESLint rules. Can be used to overwrite rules specified from the extended configs
    // e.g. "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/consistent-type-imports": "error",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variable",
        "types": ["boolean"],
        "format": ["PascalCase"],
        "prefix": ["is", "has"]
      },
      {
        "selector": "variable",
        "format": ["strictCamelCase", "StrictPascalCase", "UPPER_CASE"]
      },
      {
        "selector": "enum",
        "format": ["StrictPascalCase"],
        "prefix": ["E"]
      },
      {
        "selector": "enumMember",
        "format": ["StrictPascalCase"]
      },
      {
        "selector": "interface",
        "format": ["StrictPascalCase"],
        "prefix": ["I"]
      },
      {
        "selector": "typeAlias",
        "format": ["StrictPascalCase"],
        "prefix": ["T"]
      },
      {
        "selector": "typeParameter",
        "format": ["StrictPascalCase"],
        "prefix": ["G"]
      }
    ],
    "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off",
    "react/prop-types": 0,
    "no-debugger": "off",
    "@typescript-eslint/explicit-function-return-type": "error",
    "arrow-body-style": [2, "as-needed"],
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/ban-types": "off",
    "@typescript-eslint/triple-slash-reference": 0,
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "prefer-destructuring": [
      "error",
      {
        "object": true,
        "array": true
      }
    ],
    "semi": ["error", "always"],
    "import/prefer-default-export": "off",
    "react/sort-comp": [
      "error",
      {
        "order": [
          "defaultProps",
          "static-variables",
          "static-methods",
          "getDerivedStateFromProps",
          "state",
          "instance-variables",
          "constructor",
          "lifecycle",
          "getters",
          "setters",
          "instance-methods",
          "everything-else",
          "/^on.+$/",
          "/^handle.+$/",
          "/^render.+$/",
          "render"
        ],
        "groups": {
          "lifecycle": [
            "displayName",
            "propTypes",
            "contextTypes",
            "childContextTypes",
            "mixins",
            "statics",
            "getDefaultProps",
            "getInitialState",
            "getChildContext",
            "componentWillMount",
            "UNSAFE_componentWillMount",
            "componentDidMount",
            "componentWillReceiveProps",
            "UNSAFE_componentWillReceiveProps",
            "shouldComponentUpdate",
            "componentWillUpdate",
            "UNSAFE_componentWillUpdate",
            "getSnapshotBeforeUpdate",
            "componentDidUpdate",
            "componentDidCatch",
            "componentWillUnmount"
          ]
        }
      }
    ]
  },
  "overrides": [
    {
      "files": ["src/**/__mocks__/**/*", "src/**/*.test.*"],
      "env": {
        "jest": true
      },
      "rules": {
        "@typescript-eslint/camelcase": "off",
        "@typescript-eslint/no-explicit-any": "off"
      }
    }
  ]
}
